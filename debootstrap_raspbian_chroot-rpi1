#!/bin/bash
# (c) boris@steki.net (GPL-3.0+)
# Basic config...
################ WARNING ############################
# THIS CHROOT VAR MUST BE SET !!!!!!!! be warned or it WILL break your system :)
CHROOT="/opt/db_raspbian"
# use mirrorbrain be nice to raspbian project...
MIRROR=http://mirrordirector.raspbian.org/raspbian
#MIRROR=http://archive.raspbian.org/raspbian
XBINS="true false ls sort cp make chmod chown grep gunzip gzip mkdir mktemp rm sed seq"
XBINS+=" debootstrap tar m4 test uniq xargs xz fold md5sum bash"
# binaries which arm binaries in chrooted environment
QEMU_BINARIES="qemu-arm qemu-arm-binfmt qemu-arm-static"
# which packages you would like to have in chroot environment by default
ADDITIONAL_PACKAGES="coreutils joe less openssh-client openssh-server gcc libc6-dev git"
ADDITIONAL_PACKAGES+=" libsqlite3-dev autoconf automake devscripts gawk g++ git-core"
ADDITIONAL_PACKAGES+=" libjpeg62-dev libncurses5-dev libtool make python-dev gawk pkg-config"
ADDITIONAL_PACKAGES+=" libperl-dev libgdbm-dev libdb-dev gettext sudo libsqlite3-dev"

function do_log {
	echo "$(date +'%Y-%m-%d %T') $1"
}

function ch_exec () {
	chroot ${CHROOT} bash -c "$1"
}

function get_lib () {
	echo $(ldconfig -p|grep $1|grep '>'|cut -d '>' -f 2)
}

function get_ldd_lib () {
	echo $(ldd $1 |grep '> /'|cut -d ' ' -f 3)
}


# sanity check of native host binaries
for program in ${XBINS}; do
	which ${program} > /dev/null 2> /dev/null 
	if [ $? -ne 0 ]; then
		do_log "missing '${program}' on your host machine please install it" && exit -1
	fi
done

if [ $(id -u) -ne 0 ]; then 
	do_log "Sorry must run as root" && exit -1
fi

# let's make sure chroot dir is there
if [ ! -d "${CHROOT}" ]; then
  mkdir -p $CHROOT
fi

# Emulate correct arm CPU
QEMU_CPU=arm1176
LC_ALL=C
export CHROOT XBINS QEMU_CPU LC_ALL ADDITIONAL_PACKAGES MIRROR

# don't run if basic arm runtime system is not possible
NOBINFMT=0
for fmt in  qemu-arm arm ;do
	if [ ! -f /proc/sys/fs/binfmt_misc/${fmt} ];then
		NOBINFMT=$(($NOBINFMT + 1))
	fi
done
if [ $NOBINFMT -ne 1 ] ; then
	do_log "binfmt is not set please run your distribution setup procedure"
	do_log "binfmt support must be running for this to work...." && exit -1
fi

# initial preparation so arm binaries work without any issue
mkdir -p ${CHROOT}/proc ${CHROOT}/usr/bin ${CHROOT}/usr/sbin
NOQEMU=0
for qemu_bin in ${QEMU_BINARIES}; do
        if [ -x "$(which ${qemu_bin} 2>/dev/null)" ]; then
                cp -a $(which ${qemu_bin}) ${CHROOT}/usr/bin/
                NOQEMU=$(($NOQEMU + 1))
        fi
done
if [ $NOQEMU -eq 0 ] ; then
	do_log "You must have some of above mentioned binaries for this to work..." && exit -1
fi

# mount proc as it is required by this process
mount proc -t proc ${CHROOT}/proc && do_log "Mounting proc on ${CHROOT}/proc"

# don't run service on install
cat > ${CHROOT}/usr/sbin/policy-rc.d << EOF
#!/bin/sh
echo "All runlevel operations denied by policy" >&2
exit 101
EOF
chmod +x ${CHROOT}/usr/sbin/policy-rc.d

set -x
debootstrap --no-check-gpg --arch=armhf --verbose wheezy ${CHROOT} ${MIRROR}
set +x
# Get public key...
wget http://archive.raspbian.org/raspbian.public.key -O ${CHROOT}/tmp/raspbian.public.key

ch_exec 'apt-key add /tmp/raspbian.public.key'
ch_exec 'apt-get update'
ch_exec "apt-get -y --force-yes install m4 make wget ${ADDITIONAL_PACKAGES}"

xarch=$(uname -m)
carch=$(ch_exec 'uname -m')

# add ld-linux loader to all libs first
ALL_LIBS=$(ldconfig -p|egrep '(libnss_|ld-|libnsl|libz)'|cut -d '>' -f 2)

# Prepare cross compiler to be able to run it from chroot in "real" arm env
###########(cd ${CHROOT} ; git clone https://github.com/raspberrypi/tools.git) ### way to slow....
if [ -f /opt/master.zip ]; then
	cp /opt/master.zip ${CHROOT}
else
	(cd ${CHROOT} ; wget https://github.com/raspberrypi/tools/archive/master.zip)
fi
#### security precaution for case that master.zip failed for some reason to be downloaded all destructive operations are done in correct place
set -e
(mkdir -p ${CHROOT}/etc/dpkg/dpkg.cfg.d/; echo "force-unsafe-io" > ${CHROOT}/etc/dpkg/dpkg.cfg.d/02apt-speedup)
(mkdir -p ${CHROOT}/usr ${CHROOT}/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/arm-linux-gnueabihf/libc/usr )
do_log "Unpacking compiler"
(cd ${CHROOT}; unzip master.zip)
(cd ${CHROOT}/usr; ln -s ../tools-master/arm-bcm2708 cross)
do_log "Fixing build root includes and libraries"
(cd ${CHROOT}/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/arm-linux-gnueabihf/libc/usr ; mv lib lib-orig; ln -s /usr/lib lib; mv include include-orig ; ln -s /usr/include include)
(cd ${CHROOT}/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/arm-linux-gnueabihf/libc ; mv lib lib-orig; ln -s /lib lib)
do_log "Fixing compiler binaries names to be without triplets"
(cd ${CHROOT}/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin; for i in * ; do ln -s $i $(echo $i|sed -e 's/arm-linux-gnueabihf-//g') ;done )
ALL_LIBS=" ${ALL_LIBS} $(get_lib ld-linux.so.[2-3]) $(get_lib libstdc++.so.6) $(get_lib libz.so.1) $(get_lib libgcc_s.so.1)"
ALL_LIBS=" ${ALL_LIBS} $(get_ldd_lib ${CHROOT}/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-linux-gnueabihf-gcc) "
set +e
ch_exec 'uname -a'
if [ $? -ne 0 ]; then
        do_log "chroot not set correctly please check output of command from above" && exit -1
fi

do_log "Replace arm binaries with host ${CPU} alternatives"
for executable in $XBINS ; do
	CBIN=$(ch_exec "which ${executable}")
	XBIN=$(which ${executable})
	export executable CBIN XBIN
	cp $XBIN ${CHROOT}/${CBIN}-${xarch}
	mv ${CHROOT}/${CBIN} ${CHROOT}/${CBIN}-${carch}
	do_log "Linking  ${executable}-${xarch} as ${executable}"
	( cd $(dirname ${CHROOT}/${CBIN}); ln -sf ${executable}-${xarch} ${executable} )
	ALL_LIBS="$ALL_LIBS $(get_ldd_lib $XBIN) "
done
do_log "Replacing dash for bash"
(cd  ${CHROOT}/bin; ln -sf bash sh)

do_log '"Fixing" library locations s,lib,lab,'
for libname in $(echo $ALL_LIBS|sort|uniq) ; do
	DNAME=${CHROOT}/$(dirname $libname|sed -e 's,lib,lab,')
	mkdir -p ${DNAME}
	do_log "copy host to chroot: $libname -> ${DNAME}"
	cp  ${libname}* $DNAME
done
# now fix ld-linux to search into /lab /lab64 and other "labs" err libs hehe
mkdir -p ${CHROOT}/lib64
for libname in $(ldconfig -p|grep /ld-|cut -d '>' -f 2|sort|uniq) ; do
	DNAME=${CHROOT}/$(dirname $libname)
	mkdir -p ${DNAME}
	cp  ${libname}* $DNAME
	sed -i 's,/lib,/lab,g' ${CHROOT}${libname}*
done
# debian has ld-linux-x86-64.so.2 as link only in /lib64 so re-create it
# for opensuse it will just fail with no issues
(cd ${CHROOT}/lib64 ; ln -s /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 ld-linux-x86-64.so.2 2>/dev/null)

do_log "Creating initial bashrc"
cat << EOF >> ${CHROOT}/etc/bash.bashrc
QEMU_CPU=arm1176
LC_ALL=C
CC=arm-linux-gnueabihf-gcc
CXX=arm-linux-gnueabihf-g++
PATH=/usr/cross/gcc-linaro-arm-linux-gnueabihf-raspbian/bin:$PATH
export PATH CC CXX QEMU_CPU LC_ALL
alias ls="ls --color=auto"
alias l="ls -la"
alias ll="ls -la"
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
EOF

do_log "Everything done enjoy"
